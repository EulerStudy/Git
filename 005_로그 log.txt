> git log

# 한줄로 보여줌
> git log --all --oneline

> git log --oneline

# 가장 오래된 커밋부터 순서대로 보여줌
> git log --oneline --reverse

# 수정된 파일의 내용까지 보여줌
> git log -p

# 그래프 형태로 보여줌
> git log --all --oneline --graph

> git log --all --oneline --graph --all

# oneline 옵션과 비슷하게 보여줌 (해시코드가 전부 나옴)
> git log --pretty=oneline

# 해시코드와 만든이 이름만 보고 싶다
> git log --pretty=format:"%h %an"

# 해시코드와 만든이 이름, 커밋된 데이트와 타이틀까지 보고 싶다
> git log --pretty=format:"%h %an %ar %s"

# 엘리가 쓰는 포맷
> git log --graph -all --pretty=format:'%C(yellow) [%ad]%C(reset) %C(green) [%h]%C(reset) | %C(white)%s %C(bold red) {{%an}}%C(reset) %C(blue)%d%C(reset)' --date=short

# alias 반드시 쌍따움표 사용
> git config --global alias.history "log --graph -all --pretty=format:'%C(yellow) [%ad]%C(reset) %C(green) [%h]%C(reset) | %C(white)%s %C(bold red) {{%an}}%C(reset) %C(blue)%d%C(reset)' --date=short"

> git history

# 최근 커밋중 3개만 보겠다.
> git log -3

> git log --oneline -3

# 작성자만 따로 본다.
> git log --author="euler"

# 지정된 날짜 이전 커밋만 확인
> git log --before-"2020-09-08"

# 커밋 타이틀에서 project가 포함된 타이틀만 본다.
> git log --grep="prject"

# 소스 코드 안에서 해당 내용이 들어있는 커밋만 보여준다.
> git log -S "about"

# 조금더 자세히 내용을 알고 싶다면, 코드 내용안에 들어 있는 내용을 확인할 수 있다.
> git log -S "about" -p

# 해당 파일에 해당하는 커밋을 볼 수 있다.
> git log about.txt

# 조금더 자세히 내용을 알고 싶다면
> git log about.txt -p

# 간단한 상태만 확인하고 싶다면
> git log about.txt -s

# git log를 했을 때와 동일
> git log HEAD

# 이전 버전으로 되돌림
> git reset --hard HEAD~1

# 기존의 헤드로 되돌림 (한번은 되돌릴 수 있다)
> git reset --hard ORIG_HEAD

# 해당하는 해시 코드를 자세히 확인
> git show 해시코드아이디

# 해당하는 해시 코드에서 해당 파읿만 확인하고 싶다.
> git show 해시코드아이디:파일명

# 브랜치1과 브랜치2 사이의 커밋을 보여줌
> git log 브랜치1..브랜치2
